steps:
- name: gcr.io/cloud-builders/git
  id: variables
  entrypoint: 'bash'
  args:
    - -c 
    - |
      # store multiple values as environment variables
      # name all values with a common prefix (we'll use "build_")
      if [ "$BRANCH_NAME" = "master" ]
      then
        export build_profile="dev"
      elif [ "$BRANCH_NAME" = "prod" ]
      then
        export build_profile="prod"
      else
        export build_profile="dev"
      fi

      export build_prefix="" 
      export build_token=\"$(gcloud auth application-default print-access-token)\"
      # write all "build_" variables to the persistent volume "/workspace"
      env | grep "^build_" > /workspace/build_vars
- name: gcr.io/cloud-builders/gcloud
  id: fetch-credentials
  entrypoint: 'bash'
  args: [ '-c', "gcloud secrets versions access latest --secret=apigee-org-admin --format='get(payload.data)' | tr '_-' '/+' | base64 -d > admin.json" ]
# - name: 'gcr.io/cloud-builders/mvn'
#   id: update-registry
#   entrypoint: 'bash'
#   args:
#     - -c 
#     - |
#       source /workspace/build_vars &&
#       mvn -f cloudbuild-pom.xml -ntp apigee-registry:api apigee-registry:apiversion apigee-registry:apiversionspec apigee-registry:apideployment apigee-registry:apiartifact -P$build_profile -DprojectId=$PROJECT_ID -Doptions=update -DapiConfigFile=./registry/manifest.yaml -Dbearer=${build_token}
- name: 'gcr.io/cloud-builders/npm'
  id: install-npm-modules
  args: ['install']
# generate proxy
- name: 'ghcr.io/apigee/apigee-go-gen'
  volumes:
  - name: 'vol1'
    path: '/generated'
  id: generate-proxy
  args: ['--template', 'proxy-templates/oas3/apiproxy.yaml',
         '--set-oas', 'spec=/workspace/openapi/spec.yaml',
         '--set', 'basepath=/v1/yes',
         '--set', 'target_url=https://httpbin/org',
         '--include', 'proxy-templates/oas3/*.tmpl',
         '--output', '.'
  ]
- name: 'gcr.io/cloud-builders/npm'
  id: apigee-lint
  args: ['run', 'apigeelint']
# - name: 'gcr.io/cloud-builders/nodejs/yarn'
#   id: unit-testing-and-code-coverage
#   entrypoint: 'bash'
#   args: ['-c', 'node_modules/istanbul/lib/cli.js cover node_modules/mocha/bin/_mocha test/unit']
- name: 'gcr.io/cloud-builders/mvn'
  id: process-resources
  entrypoint: 'bash'
  args:
    - -c 
    - |
      # Read environment variables from disk
      source /workspace/build_vars &&
      mvn -f cloudbuild-pom.xml -ntp process-resources -P${build_profile} -Dorg=$PROJECT_ID -Ddeployment.suffix=${build_prefix} -Dcommit=$COMMIT_SHA -Dbranch=$BRANCH_NAME -Duser.name=cloudbuild
- name: 'gcr.io/cloud-builders/mvn'
  id: pre-deployment-configurations
  entrypoint: 'bash'
  args:
    - -c 
    - |
      # Read environment variables from disk
      source /workspace/build_vars &&
      mvn -f cloudbuild-pom.xml -ntp apigee-config:targetservers -P${build_profile} -Dorg=$PROJECT_ID -Ddeployment.suffix=${build_prefix} -Dfile=admin.json
- name: 'gcr.io/cloud-builders/mvn'
  id: package
  entrypoint: 'bash'
  args:
    - -c 
    - |
      # Read environment variables from disk
      source /workspace/build_vars &&
      mvn -f cloudbuild-pom.xml -ntp apigee-enterprise:configure -P${build_profile} -Dorg=$PROJECT_ID -Ddeployment.suffix=${build_prefix}
- name: 'gcr.io/cloud-builders/mvn'
  id: deploy
  entrypoint: 'bash'
  args:
    - -c 
    - |
      # Read environment variables from disk
      source /workspace/build_vars &&
      mvn -f cloudbuild-pom.xml -ntp apigee-enterprise:deploy -P${build_profile} -Dorg=$PROJECT_ID -Ddeployment.suffix=${build_prefix} -Dbearer=${build_token}
# - name: 'gcr.io/cloud-builders/nodejs/yarn'
#   id: devint-testing
#   entrypoint: 'bash'
#   args: ['-c', 'node_modules/mocha/bin/_mocha --recursive ./target/tests/dev-integration']
# - name: 'gcr.io/cloud-builders/nodejs/yarn'
#   id: functional-testing
#   entrypoint: 'bash'
#   args: ['-c', 'node_modules/cucumber/bin/cucumber.js target/test/integration/features']
options:
  logging: CLOUD_LOGGING_ONLY
